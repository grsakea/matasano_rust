extern crate hex;

mod constant;
use crypto;


pub fn decrypt_block(data: &Vec<u8>, key: &Vec<u8>) -> Vec<u8> {
    let big_key = key_expansion(key);

    let mut state = data.clone();
    state = add_round_key(&state, &big_key[16*10..big_key.len()].to_vec());

    for round in (1..10).rev() {
        state = inv_shift_row(&state);
        state = inv_sbox(&state);
        let round_key = big_key[16*round..16*round+16].to_vec();
        state = add_round_key(&state, &round_key);
        state = inv_mix_columns(&state);
    }
    state = inv_shift_row(&state);
    state = inv_sbox(&state);
    state = add_round_key(&state, &big_key[0..16].to_vec());

    state
}

#[test]
fn test_aes_decrypt() {
    let input_data = hex::decode("69c4e0d86a7b0430d8cdb78070b4c55a").unwrap();
    let input_key = hex::decode("000102030405060708090a0b0c0d0e0f").unwrap();
    let output = hex::decode("00112233445566778899aabbccddeeff").unwrap();
    assert_eq!(decrypt_block(&input_data, &input_key), output);
}

pub fn add_round_key(data: &Vec<u8>, round_key: &Vec<u8>) -> Vec<u8> {
    crypto::xor_repeating(&data, &round_key)
}

pub fn inv_shift_row(data: &Vec<u8>) -> Vec<u8> {
    let mut temp = vec![];

    temp.push(data[00]);
    temp.push(data[13]);
    temp.push(data[10]);
    temp.push(data[07]);
    temp.push(data[04]);
    temp.push(data[01]);
    temp.push(data[14]);
    temp.push(data[11]);
    temp.push(data[08]);
    temp.push(data[05]);
    temp.push(data[02]);
    temp.push(data[15]);
    temp.push(data[12]);
    temp.push(data[09]);
    temp.push(data[06]);
    temp.push(data[03]);
    temp
}


fn sbox(input: &Vec<u8>) -> Vec<u8> {
    let transfo = [
        0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
        0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
        0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
        0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
        0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
        0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
        0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
        0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
        0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
        0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
        0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
        0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
        0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
        0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
        0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
        0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    ];

    let mut output = vec![];
    for item in input {
        output.push(transfo[*item as usize]);
    }
    output
}

pub fn inv_mix_columns(state: &Vec<u8>) -> Vec<u8> {
    let mut out = vec![];
    for col in 0..4 {
        let offset = 4*col;
        let temp = inv_mix_column(state[offset], state[offset+1], state[offset+2], state[offset+3]);
        for i in temp {
            out.push(i);
        }
    }

    out
}

fn inv_mix_column(a0: u8, a1: u8, a2: u8, a3:u8) -> Vec<u8> {
    let mut out = vec![];
    out.push(gal_mul(14, a0) ^ gal_mul(11, a1) ^ gal_mul(13, a2) ^ gal_mul(9, a3));
    out.push(gal_mul(9, a0)  ^ gal_mul(14, a1) ^ gal_mul(11, a2) ^ gal_mul(13, a3));
    out.push(gal_mul(13, a0) ^ gal_mul(9, a1)  ^ gal_mul(14, a2) ^ gal_mul(11, a3));
    out.push(gal_mul(11, a0) ^ gal_mul(13, a1) ^ gal_mul(9, a2)  ^ gal_mul(14, a3));
    out
}


fn mix_column(a0: u8, a1: u8, a2: u8, a3:u8) -> (u8,u8,u8,u8) {
    let r0 = gal_mul(2, a0) ^ gal_mul(3, a1) ^ a2             ^ a3;
    let r1 = a0             ^ gal_mul(2, a1) ^ gal_mul(3, a2) ^ a3;
    let r2 = a0             ^ a1             ^ gal_mul(2, a2) ^ gal_mul(3, a3);
    let r3 = gal_mul(3, a0) ^ a1             ^ a2             ^ gal_mul(2, a3);
    (r0, r1, r2, r3)
}

#[test]
fn test_mix_column() {
    assert_eq!(mix_column(0xdb,0x13,0x53,0x45),(0x8e,0x4d,0xa1,0xbc));
    assert_eq!(mix_column(0xf2,0x0a,0x22,0x5c),(0x9f,0xdc,0x58,0x9d));
}

fn gal_mul(base:u8, a: u8) -> u8 {
    match base {
        2  => constant::GAL_MUL2[a as usize],
        3  => constant::GAL_MUL3[a as usize],
        9  => constant::GAL_MUL9[a as usize],
        11 => constant::GAL_MUL11[a as usize],
        13 => constant::GAL_MUL13[a as usize],
        14 => constant::GAL_MUL14[a as usize],
        _  => panic!("Galois value not supported"),
    }
}

pub fn inv_sbox(input: &Vec<u8>) -> Vec<u8> {
    let transfo = [
        0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
        0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
        0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
        0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
        0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
        0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
        0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
        0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
        0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
        0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
        0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
        0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
        0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
        0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
        0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
    ];
    let mut output = vec![];
    for item in input {
        output.push(transfo[*item as usize]);
    }
    output
}

fn rcon_op(input: u8) -> u8 {
    let transfo = [
        0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
        0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
        0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
        0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
        0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
        0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
        0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
        0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
        0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
        0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
        0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
        0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
        0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
        0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
        0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
        0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
    ];
    transfo[input as usize]
}

pub fn key_expansion(enc_key: &Vec<u8>) -> Vec<u8> {
    let mut expanded_key = enc_key.clone();

    for round in 0..10 {
        let t = &expanded_key.clone()[expanded_key.len() - 4..];
        let t = &key_schedule_core(t, round as u8 +1);
        let new_column = super::xor_repeating(&expanded_key[round*16..4+(round*16)].to_vec(), &t);
        for item in new_column.clone() {
            expanded_key.push(item);
        }
        let mut last_column = new_column.clone();
        for i in 1..4 {
            let start_index = (i*4)+(round*16);
            let stop_index = (i*4)+(round*16) + 4;
            let next_column = super::xor_repeating(&expanded_key[start_index..stop_index].to_vec(), &last_column);
            for item in next_column.clone() {
                expanded_key.push(item);
            }
            last_column = next_column.clone();
        }
    }
    expanded_key
}

#[test]
fn test_key_expansion() {
    let input : Vec<u8> = hex::decode("2b7e151628aed2a6abf7158809cf4f3c").unwrap();
    let output : Vec<u8> = hex::decode("2b7e151628aed2a6abf7158809cf4f3ca0fafe1788542cb123a339392a6c7605f2c295f27a96b9435935807a7359f67f3d80477d4716fe3e1e237e446d7a883bef44a541a8525b7fb671253bdb0bad00d4d1c6f87c839d87caf2b8bc11f915bc6d88a37a110b3efddbf98641ca0093fd4e54f70e5f5fc9f384a64fb24ea6dc4fead27321b58dbad2312bf5607f8d292fac7766f319fadc2128d12941575c006ed014f9a8c9ee2589e13f0cc8b6630ca6").unwrap();

    assert_eq!(key_expansion(&input), output);
}

fn key_schedule_core(key: &[u8], rcon: u8) -> Vec<u8> {
    let key = key_rotate(key);
    let mut key = sbox(&key.to_vec());
    key[0] = key[0] ^ rcon_op(rcon);

    key
}

fn key_rotate(key: &[u8]) -> [u8;4] {
    [key[1], key[2], key[3], key[0]]
}
